#! /usr/bin/python

import sys
import argparse

# https://gis.stackexchange.com/a/279937
from qgis.core import (
     QgsApplication, 
     QgsProcessingFeedback, 
     QgsVectorLayer
)
from qgis.analysis import QgsNativeAlgorithms

# Append the path where processing plugin can be found
sys.path.append('/usr/share/qgis/python/plugins/')

import processing
from processing.core.Processing import Processing
 

def main():
      
    # handle cli flags
    parser = argparse.ArgumentParser(
        description = "QGIS Zonal Statistics wrapper")

    parser.add_argument('RasterLayer', action = 'store', 
            help = "Raster layer in input.") 

    parser.add_argument('-b', '--BandNumber', action = 'store', default = 1, 
            type = int, 
            help = "If the raster is multiband choose the band you want to calculate the statistics. Default: 1.")

    parser.add_argument('VectorLayer', action = 'store', 
            help = "Polygon Vector layer containing zones.")

    parser.add_argument('-p', '--prefix', action = 'store', default = "_", 
            help = "Prefix string for output columns. Default: '_'.")

    parser.add_argument('-statCount', action = 'store_true', 
            help = "Statistics to calculate")   
    parser.add_argument('-statSum', action = 'store_true')   
    parser.add_argument('-statMean', action = 'store_true')   
    parser.add_argument('-statMedian', action = 'store_true')   
    parser.add_argument('-statStd', action = 'store_true')   
    parser.add_argument('-statMin', action = 'store_true')   
    parser.add_argument('-statMax', action = 'store_true')   
    parser.add_argument('-statRange', action = 'store_true')   
    parser.add_argument('-statMinority', action = 'store_true')   
    parser.add_argument('-statMajority', action = 'store_true')   
    parser.add_argument('-statVariety', action = 'store_true')   
    parser.add_argument('-statVariance', action = 'store_true')   
    parser.add_argument('-statAll', action = 'store_true', 
            help = "Calculate all the above")   


    # parse input arguments 
    args = parser.parse_args()
    
    # prepare stats from input arguments
    stats = []
    
    # if statAll is checked append all stats to list
    if args.statAll: 
        for i in range(12):
            stats.append(i)
    if args.statCount:
        stats.append(0)
    if args.statSum:
        stats.append(1)
    if args.statMean:
        stats.append(2)
    if args.statMedian:
        stats.append(3)
    if args.statStd:
        stats.append(4)
    if args.statMin:
        stats.append(5)
    if args.statMax:
        stats.append(6)
    if args.statRange:
        stats.append(7)
    if args.statMinority:
        stats.append(8)
    if args.statMajority:
        stats.append(9)
    if args.statVariety:
        stats.append(10)
    if args.statVariance:
        stats.append(11)


    # remove duplicates by converting to set and back to list
    stats_final = list(set(stats))
    
    # See https://gis.stackexchange.com/a/155852/4972 for details about the prefix 
    QgsApplication.setPrefixPath('/usr', True)
    qgs = QgsApplication([], False)
    qgs.initQgis()
    
    Processing.initialize()
    QgsApplication.processingRegistry().addProvider(QgsNativeAlgorithms()) 
    # create parameters for qgis processing tool
    params = {
        'INPUT_RASTER': args.RasterLayer, 
        'RASTER_BAND': args.BandNumber, 
        'INPUT_VECTOR': args.VectorLayer, 
        'COLUMN_PREFIX': args.prefix, 
        'STATS': stats_final
    }

    # print(params)
    # the magic happens here
    res = processing.run('qgis:zonalstatistics', params)


if __name__ == '__main__':
    main()

